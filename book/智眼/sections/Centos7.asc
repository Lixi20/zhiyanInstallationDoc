== CentOS7 基础环境

=== 基础环境

[source, bash]
----

#安装第三方仓库
yum install -y centos-release-scl

#安装gcc
yum install -y devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-make

#覆盖系统原有的引用
scl enable devtoolset-9 bash

#安装wget
yum install -y wget

#创建download文件夹
mkdir  ~/download

cd  ~/download

----

==== 安装OpenSSL

[source, bash]
----

wget --no-check-certificate https://www.openssl.org/source/old/1.1.1/openssl-1.1.1m.tar.gz -O openssl-1.1.1m.tar.gz

tar xf openssl-1.1.1m.tar.gz

cd openssl-1.1.1m

./config --prefix=/usr/local/openssl-1.1.1m -fPIC

make

make install

echo '/usr/local/openssl-1.1.1m/lib' >> /etc/ld.so.conf

ldconfig

ldconfig -p|grep ssl

----

TIP: 编译软件时，出现如下错误：You need Perl 5. 解决方法：yum -y install perl


==== 安装Sqlite

[source, bash]
----

cd  ~/download

wget --no-check-certificate https://www.sqlite.org/2020/sqlite-autoconf-3330000.tar.gz -O sqlite-autoconf-3330000.tar.gz

tar xf sqlite-autoconf-3330000.tar.gz

cd sqlite-autoconf-3330000

./configure --prefix=/usr/local/sqlite-3.33

make

make install

echo '/usr/local/sqlite-3.33/lib' >> /etc/ld.so.conf

ldconfig

ldconfig -p|grep libsqlite3.so

----

==== 安装Python

[source, bash]
----

#安装python
wget https://www.python.org/ftp/python/3.10.4/Python-3.10.4.tgz -O Python-3.10.4.tgz

tar xf Python-3.10.4.tgz

cd Python-3.10.4


#修改setup.py，增加SQLite路径
sqlite_inc_paths = ['/usr/include',
                    '/usr/include/sqlite',
                    '/usr/include/sqlite3',
                    '/usr/local/include',
                    '/usr/local/include/sqlite',
                    '/usr/local/include/sqlite3',
                   ]
增加 '/usr/local/sqlite-3.33/include', 到数组：

sqlite_inc_paths = ['/usr/include',
                    '/usr/include/sqlite',
                    '/usr/include/sqlite3',
                    '/usr/local/include',
                    '/usr/local/include/sqlite',
                    '/usr/local/include/sqlite3',
                    '/usr/local/sqlite-3.33/include',
                   ]
#编译 
CFLAGS='-I/usr/local/sqlite-3.33/include' \
    LDFLAGS='-L/usr/local/sqlite-3.33/lib' \
    ./configure --prefix=/usr/local/python-3.10.4 \
    --enable-optimizations \
    --with-openssl=/usr/local/openssl-1.1.1m \
    --with-ssl-default-suites=openssl \
    --with-ensurepip \
    --enable-loadable-sqlite-extensions

make

make install

##创建软链接
ln -s /usr/local/python-3.10.4 /usr/local/python3
ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip310
ln -s /usr/local/python3/bin/python3 /usr/local/bin/python310

##更换pip源
pip310 install --upgrade -i https://pypi.tuna.tsinghua.edu.cn/simple pip
pip310 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple

----

TIP:  libffi-devel 错误："ImportError: No module named '_ctypes'" 解决方法： `yum install -y gcc make openssl-devel libffi-devel`


----

wget http://dl.cdgeekcamp.com/centos/7/openssl/1.1.1m/openssl-1.1.1m-1.el7.x86_64.tar.gz -O openssl-1.1.1m-1.el7.x86_64.tar.gz
tar xf openssl-1.1.1m-1.el7.x86_64.tar.gz
rm -rf /usr/local/openssl-1.1.1m
mv openssl-1.1.1m/ /usr/local/openssl-1.1.1m
echo '/usr/local/openssl-1.1.1m/lib' >> /etc/ld.so.conf
ldconfig
ldconfig -p|grep ssl


wget http://dl.cdgeekcamp.com/centos/7/sqlite/3.33/sqlite-3.33-1.el7.x86_64.tar.gz -O sqlite-3.33-1.el7.x86_64.tar.gz
tar xf sqlite-3.33-1.el7.x86_64.tar.gz
rm -rf /usr/local/sqlite-3.33
mv sqlite-3.33/ /usr/local/sqlite-3.33

echo '/usr/local/sqlite-3.33/lib' >> /etc/ld.so.conf
ldconfig
ldconfig -p|grep libsqlite3.so


wget http://dl.cdgeekcamp.com/centos/7/python/3/python-3.10.4-1.el7.x86_64.tar.gz -O python-3.10.4-1.el7.x86_64.tar.gz
tar xf python-3.10.4-1.el7.x86_64.tar.gz
rm -rf /usr/local/python-3.10.4
mv python-3.10.4 /usr/local/python-3.10.4

ln -s /usr/local/python-3.10.4/usr/local/python3
ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip310
ln -s /usr/local/python3/bin/python3 /usr/local/bin/python310

pip310 install --upgrade -i https://pypi.tuna.tsinghua.edu.cn/simple pip
pip310 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple

python310 -V

----


==== 安装java 11

[source, bash]
----

yum install -y java-11-openjdk java-11-openjdk-devel

----


==== 安装rust

[source, bash]
----

curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

source $HOME/.cargo/env

----


==== 安装PostgreSQL

[source, bash]
----

#安装PostgreSQL
yum install -y postgresql postgresql-devel postgresql-server

#初始化数据库
postgresql-setup initdb

#查看是否生成数据库配置文件
ll /var/lib/pgsql/data

# grep -v '^#' /var/lib/pgsql/data/pg_hba.conf |sort -u
host    all             all             0.0.0.0/0               password
local   all             all                                     peer


#开机自启
systemctl enable postgresql

#启动
systemctl start postgresql

#查看服务状态
systemctl status postgresql

----

===== zhiyan数据库设置

[source, bash]
----

#切换用户
su - postgres

#进入数据库
psql

#创建用户
create user zhiyan with password 'aeJeifasho1aiphainga';

#创建zhiyan数据库
create database zhiyan owner zhiyan;


#选择zhiyan数据库
\c zhiyan

#创建基础用户表

CREATE TABLE public.user_info (
	id bigserial NOT NULL,
	username varchar NOT NULL,
	"password" varchar NOT NULL
);

#插入默认帐号信息
INSERT INTO public.user_info (username,"password") VALUES
	 ('admin','zhiyan');

#创建用户模块信息表
CREATE TABLE public.user_module_stat_list (
	host varchar NOT NULL,
	module_name varchar NOT NULL,
	module_chart_type varchar NOT NULL,
	module_stat bool NOT NULL,
	module_chinese_name varchar NULL,
	module_unit varchar NULL,
	module_headers varchar NULL
);

#创建用户令牌表
CREATE TABLE public.user_token (
	id bigserial NOT NULL,
	datetime int8 NOT NULL,
	host varchar NOT NULL,
	"token" varchar NOT NULL
);

#赋权
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO zhiyan;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO zhiyan;

#退出postgresql
\q

#退出postgres用户
exit

#登陆验证
psql -h 127.0.0.1 -U zhiyan aeJeifasho1aiphainga

----

==== redis

[source, bash]
----

#安装redis
yum install -y redis

----

TIP: yum报错:没有可用软件包 redis。解决办法:下载fedora的epel仓库:yum install epel-release

[source, bash]
----

#设置reids密码
echo 'requirepass aePhohw6lae0Kihah1ph' >> /etc/redis.conf

#开机自启
service redis enable

#启动
service redis start

#查看服务状态
service redis status

# 验证密码
redis-cli  -a aePhohw6lae0Kihah1ph --scan --pattern *

----

=== 智眼

==== 创建文件夹

[source, bash]
----

#创建项目文件夹
mkdir -p /data/zhiyan/zhiyan-web-server/ /data/zhiyan/zhiyan-server /data/zhiyan/zhiyan-web /data/zhiyan/module/bin /data/zhiyan/module/conf

#创建项目日志文件夹
mkdir -p /var/log/zhiyan/module /var/log/zhiyan/zhiyan-server /var/log/zhiyan/zhiyan-web-server /var/log/zhiyan/zhiyan-agent

#创建用户：zhiyan
useradd --comment ZhiYan --home-dir /var/lib/zhiyan --shell /sbin/nologin zhiyan

#赋权
chown -R zhiyan:zhiyan /var/lib/zhiyan /var/log/zhiyan

----

==== web-server

本地：

[source, bash]
----

#将zhiyan-web-server生成jar包
mvn package

----

将 `jar包`、`application.properties`、`logback.xml` 三个文件压缩打包,然后上传到服务器 `/data/zhiyan/zhiyan-web-server` 目录下 

服务器：
[source, bash]
----

#创建软链接
ln -s /data/zhiyan/zhiyan-web-server/zhiyan-web-server-1.0.0.jar /data/zhiyan/zhiyan-web-server/lastest.jar

#创建.service文件
cat << EOF > /usr/lib/systemd/system/zhiyan-web-server.service
[Unit]
Description=ZhiYan Web Server
After=network.target remote-fs.target nss-lookup.target

[Service]
Type=simple
Environment="CONFIG_FILE=/data/zhiyan/zhiyan-web-server/application.properties"
Environment="JAR_FILE=/data/zhiyan/zhiyan-web-server/lastest.jar"

User=zhiyan
Group=zhiyan
WorkingDirectory=/data/zhiyan/zhiyan-web-server
ExecStart=/usr/bin/java -Dspring.config.location=\${CONFIG_FILE} -jar \${JAR_FILE} 
SuccessExitStatus=143
StandardOutput=null
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl  enable zhiyan-web-server
systemctl  start zhiyan-web-server
systemctl  status zhiyan-web-server


----

TIP:  报错: `ERROR in ch.qos.logback.core.rolling.RollingFileAppender[MAIN] - openFile(error.log,true) call failed. java.io.FileNotFoundExceptio` 解决办法: 修改logback.xml中第五行<file>字段，修改为可写入的地址

配置文件(src/main/resources/application.properties):

----
#web-server端口
server.port=8080

spring.jpa.hibernate.ddl-auto=none

#PostgreSQL地址
spring.datasource.url=jdbc:postgresql://localhost:5432/zhiyan

#PostgreSQL用户名
spring.datasource.username=zhiyan

#PostgreSQL密码
spring.datasource.password=zhiyan

#SQL驱动
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#Redis地址
spring.redis.host=localhost

#Redis端口
spring.redis.port=6379

#Redis密码
spring.redis.password=zhiyan

#Redis数据表
spring.redis.database=0

#Redis最大空闲连接数
spring.redis.jedis.pool.max-active=32

# 最小空闲连接数
spring.redis.jedis.pool.max-idle=6

# 最大活跃连接数，负数为不限制
spring.redis.jedis.pool.min-idle=4

#Redis等待可用连接的最大时间，负数为不限制
spring.redis.jedis.pool.max-wait=100

#数据库连接超时时间
spring.redis.timeout=1000

#log配置文件
logging.config=./logback.xml

----

=== web

修改 `zhiyan-web` 中 `src/config.json` 中的 `host` 地址,修改为 `服务器web-server` 的地址和端口

----

{
    "zhiyan" : {
      "host": "127.0.0.0:1111"
    }
  }

----

本机：
[source, bash]
----

#生成静态网页
npm run build

#在文件夹中会生成'build'文件夹

#将build文件夹压缩打包
tar zcvf web.tar.gz build/

#将生成的build文件夹压缩打包传输至服务器/data/zhiyan/zhiyan-web目录下

#解压文件
tar xvf web.tar.gz

mv build/* .

rm -rf build web.tar.gz

#安装nginx
yum install -y nginx

systemctl  enable nginx

systemctl  start nginx

systemctl  status nginx


#修改nginx配置文件：/etc/nginx/nginx.conf,在http{}内增加如下内容
server {
  listen 8080;
  # server_name your.domain.com;
  root /data/zhiyan/zhiyan-web;
  index index.html index.htm;
  location / {
    try_files $uri $uri/ /index.html;
  }
  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }
  error_page 500 502 503 504 /500.html;
  client_max_body_size 20M;
  keepalive_timeout 10;
}

----


=== server

本地：

[source, bash]
----

#将zhiyan-server生成jar包
mvn package

----

将 `jar包`、`application.properties`、`logback.xml` 三个文件压缩打包,然后上传到服务器 `/data/zhiyan/zhiyan-web-server` 目录下 

服务器：
[source, bash]
----

#创建软链接
ln -s /data/zhiyan/zhiyan-server/zhiyan-server-1.0.0.jar /data/zhiyan/zhiyan-server/lastest.jar

#创建.service文件
cat << EOF > /usr/lib/systemd/system/zhiyan-server.service
[Unit]
Description=ZhiYan Server
After=network.target remote-fs.target nss-lookup.target

[Service]
Type=simple
Environment="CONFIG_FILE=/data/zhiyan/zhiyan-server/application.properties"
Environment="JAR_FILE=/data/zhiyan/zhiyan-server/lastest.jar"

User=zhiyan
Group=zhiyan
WorkingDirectory=/data/zhiyan/zhiyan-server
ExecStart=/usr/bin/java -Dspring.config.location=\${CONFIG_FILE} -jar \${JAR_FILE} 
SuccessExitStatus=143
StandardOutput=null
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload

systemctl  enable zhiyan-server

systemctl  start zhiyan-server

systemctl  status zhiyan-server

----

TIP:  报错: `ERROR in ch.qos.logback.core.rolling.RollingFileAppender[MAIN] - openFile(error.log,true) call failed. java.io.FileNotFoundExceptio` 解决办法: 修改logback.xml中第五行<file>字段，修改为可写入的地址


----
#grpc地址
grpc.server.address=127.0.0.1

#grpc端口
grpc.server.port=9876

#PostgreSQL地址
db.url=jdbc:postgresql://localhost:5432/zhiyan

#PostgreSQL用户名
db.username=zhiyan

#PostgreSQL密码
db.password=zhiyan

#PostgreSQL驱动
db.driver=org.postgresql.Driver

#log配置文件
logging.config=./logback.xml
----

==== agent
[NOTE]
Rust项目编译生成的二进制文件放在不同环境下运行会出现libc版本不同的错误,所以Rust项目在服务器上编译

[source, bash]
----

#创建rust项目编译文件夹
mkdir ~/download/ZhiYan ~/download/ZhiYanModule

#将libzygrpc、libzymod-rust、zhiyan-agent项目通过scp传输至~/download/ZhiYan

#创建Cargo文件
cat << EOF > ~/download/ZhiYan/Cargo.toml
[workspace]

members = [
    "zhiyan-agent",
    "libzymod-rust"
]
exclude = [
    "libzygrpc"
]

[patch.crates-io]
libzygrpc={path = "~/download/ZhiYan/libzygrpc/rust"}
EOF 

#编译
cargo build --release

#将编译好的可执行文件放入bin目录
cp -r target/release/zhiyan-agent /data/zhiyan/module/bin/

#创建.service文件
cat << EOF > /usr/lib/systemd/system/zhiyan-agent.service
[Unit]
Description=ZhiYan Agent
After=network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target

[Service]
Type=simple
User=zhiyan
Group=zhiyan
ExecStart=/data/zhiyan/module/bin/zhiyan-agent -c /data/zhiyan/module/conf/agent.conf  -l /data/zhiyan/module/conf/log.yaml
StandardOutput=null
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

systemctl  enable zhiyan-agent

systemctl  start zhiyan-agent

systemctl  status zhiyan-agent

----

配置文件(conf/agent.conf.sample):

----

[zyagent]
active=true

#智眼server GRPC地址
server_host=localhost

#智眼server GRPC端口
server_port=9876

#网页生成的host和对应的令牌(token)
host=localhost
token=

----

==== modules

[source, bash]
----

#在本地将Module打包
tar zcvf ZhiYanModule.tar.gz zhiyan-mod-*

#将ZhiYanModule.tar.gz通过scp传输至~/download/ZhiYanModule
scp ZhiYanModule.tar.gz root@127.0.0.1:~/download/ZhiYanModule

#创建config复制器
cat << EOF > ~/download/ZhiYanModule/config_cp.sh

cd zhiyan-mod-\$1

if test -f "conf/\$1_log.yaml.sample"; then
    # Rust
    cp conf/\$1.conf.sample /data/zhiyan/module/conf/\$1.conf && cp conf/\$1_log.yaml.sample /data/zhiyan/module/conf/\$1.log.yaml
else
    # Python
    cp conf/\$1.conf.sample /data/zhiyan/module/conf/\$1.conf
fi

cd ..
EOF

sh config_cp.sh bandwidth
sh config_cp.sh cpu
sh config_cp.sh dns
sh config_cp.sh filesystem
sh config_cp.sh hostname
sh config_cp.sh io
sh config_cp.sh load
sh config_cp.sh memory
sh config_cp.sh network
sh config_cp.sh network-address
sh config_cp.sh network-route
sh config_cp.sh processes
sh config_cp.sh swap
sh config_cp.sh tasks
sh config_cp.sh uptime

cd /data/zhiyan/module/conf/

sed -i 's/token=/token={your token}/g' *.conf

sed -i 's/localhost/{your host}/g' *.conf

----

===== Rust项目

[NOTE]
Rust项目编译生成的二进制文件放在不同环境下运行会出现libc版本不同的错误,所以Rust项目在服务器上编译

[source, bash]
----
#创建Cargo.toml
cat << EOF > ~/download/ZhiYanModule/Cargo.toml
[workspace]

members = [
    "zhiyan-mod-cpu",
    "zhiyan-mod-swap",
    "zhiyan-mod-hostname",
    "zhiyan-mod-tasks",
    "zhiyan-mod-bandwidth",
    "zhiyan-mod-dns",
    "zhiyan-mod-uptime",
    "zhiyan-mod-io",
    "zhiyan-mod-load",
    "zhiyan-mod-memory",
    "zhiyan-mod-network-route",
    "zhiyan-mod-network"
]

[patch.crates-io]
libzymod-rust = { path = "/root/download/ZhiYan/libzymod-rust" }
libzygrpc = { path = "/root/download/ZhiYan/libzygrpc/rust"}
EOF

#编译
cargo build --release

#将编译好的可执行文件放入bin目录
cp -r ~/download/ZhiYanModule/target/release/zhiyan-mod-* /data/zhiyan/module/bin/

rm -rf /data/zhiyan/module/bin/*.d

----

配置文件(conf/memory.conf.sample)

以memory模块举例

----

[zymod]
#module名称
mod_name=memory

active=true

#网页生成的host和对应的令牌(token)
host=localhost
token=

#zhiyan-agent地址
agent_host=localhost

#zhiyan-agent端口
agent_port=9090

#日志等级 (0：严重错误，1：错误，2：警告，3：信息，4：调试，5：跟踪调试)
debug=3

#试运行
dry_run=false

#间隔时间
interval=3000

#单位
unit=G

#module中文命名
chinese_name=内存

#图表类型(chart：绘图，list：列表，chartlist：绘图列表，tag：状态栏，detailedtag：详细状态栏)
chart_type=chart

#字段映射 例:{"eng":"中文"}；tag字段表示生成图表同时也会生成小标签，name表示小标签命名，keyword表示小标签数据采用的字段名
headers={"buff_cache":"内核缓冲/缓存","free":"未分配","used":"已分配","total":"内存总量","avail":"可直接使用","tag": [{"name": "内存已分配","keyword": "used"},{"name": "内存未分配","keyword": "free"}]}

----

===== Python项目

====== libzygrpc(python)

[source, bash]
----

cd ~/download/ZhiYan/libzygrpc/python

#安装依赖
pip3 install -U grpcio protobuf grpcio-tools

#在libzygrpc目录下运行
python3 -m grpc_tools.protoc -I . --python_out=python/ --grpc_python_out=python/ proto/zhiyan_rpc.proto
#gRPC工具会生成两个Python文件：proto/zhiyan_rpc_pb2.py,proto/zhiyan_rpc_pb2_grpc.py

#安装
sh ~/download/ZhiYan/libzygrpc/python/build.sh 

----

====== libzymod-python

[source, bash]
----
cd ~/download/ZhiYan/libzymod-python

#安装
sh ~/download/ZhiYan/libzymod-python/build.sh

----

====== module(python)

[source, bash]
----

#python模块安装sdk
pip3 install -U /root/download/ZhiYan/libzymod-python/dist/zymod-1.7.0-py3-none-any.whl

pip3 install -u /root/download/ZhiYan/libzygrpc/python/dist/zygrpc-0.1.2-py3-none-any.whl

#python安装脚本
cat << EOF > ~/download/ZhiYanModule/py_install.sh
cd zhiyan-mod-\$1 && sh build.sh && cd ..
EOF

sh py_install.sh filesystem

sh py_install.sh processes

sh py_install.sh network-address

cp /usr/local/python3/bin/zymod* /data/zhiyan/module/bin/

将zymod_*改名为zhiyan-mod-*

cp zymod_* zhiyan-mod-*
----

===== Module管理

[source, bash]
----
#创建Module启动器
cat << EOF > /data/zhiyan/module/bin/starter.sh
if test -f "/data/zhiyan/module/conf/\$1.log.yaml"; then
    # Rust
    /data/zhiyan/module/bin/zhiyan-mod-\$1 -c /data/zhiyan/module/conf/\$1.conf  -l /data/zhiyan/module/conf/\$1.log.yaml
else
    # Python
    /data/zhiyan/module/bin/zhiyan-mod-\$1 -c /data/zhiyan/module/conf/\$1.conf
fi
EOF

#创建服务文件
cat << EOF > /usr/lib/systemd/system/zhiyan-mod@.service
[Unit]
Description=zhiyan-mod-%i
After=network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target

[Service]
Type=simple
User=zhiyan
Group=zhiyan
ExecStart=/bin/sh /data/zhiyan/module/bin/starter.sh %i
StandardOutput=null
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF


systemctl  enable zhiyan-mod@bandwidth
systemctl  start zhiyan-mod@bandwidth
systemctl  status zhiyan-mod@bandwidth

systemctl  enable zhiyan-mod@cpu
systemctl  start zhiyan-mod@cpu
systemctl  status zhiyan-mod@cpu

systemctl  enable zhiyan-mod@dns
systemctl  start zhiyan-mod@dns
systemctl  status zhiyan-mod@dns

systemctl  enable zhiyan-mod@hostname
systemctl  start zhiyan-mod@hostname
systemctl  status zhiyan-mod@hostname

systemctl  enable zhiyan-mod@io
systemctl  start zhiyan-mod@io
systemctl  status zhiyan-mod@io

systemctl  enable zhiyan-mod@memory
systemctl  start zhiyan-mod@memory
systemctl  status zhiyan-mod@memory

systemctl  enable zhiyan-mod@processes
systemctl  start zhiyan-mod@processes
systemctl  status zhiyan-mod@processes               

systemctl  enable zhiyan-mod@swap
systemctl  start zhiyan-mod@swap
systemctl  status zhiyan-mod@swap

systemctl  enable zhiyan-mod@tasks
systemctl  start zhiyan-mod@tasks
systemctl  status zhiyan-mod@tasks

systemctl  enable zhiyan-mod@uptime
systemctl  start zhiyan-mod@uptime
systemctl  status zhiyan-mod@uptime

systemctl  enable zhiyan-mod@network-route
systemctl  start zhiyan-mod@network-route
systemctl  status zhiyan-mod@network-route           

systemctl  enable zhiyan-mod@filesystem
systemctl  start zhiyan-mod@filesystem
systemctl  status zhiyan-mod@filesystem              

systemctl  enable zhiyan-mod@network-address
systemctl  start zhiyan-mod@network-address
systemctl  status zhiyan-mod@network-address       

systemctl  enable zhiyan-mod@load
systemctl  start zhiyan-mod@load
systemctl  status zhiyan-mod@load

systemctl  enable zhiyan-mod@network
systemctl  start zhiyan-mod@network
systemctl  status zhiyan-mod@network

----