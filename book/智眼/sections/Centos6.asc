== CentOS6

=== yum

[source, bash]
----
cd /etc/yum.repos.d/

rm -rf *

----

生成以下两个repo文件

CentOS-Base.repo

----

cat <<EOF> /etc/yum.repos.d/CentOS-Base.repo
[base]
name=CentOS-$releasever - Base - mirrors.aliyun.com
failovermethod=priority
baseurl=http://mirrors.aliyun.com/centos-vault/6.10/os/$basearch/
        http://mirrors.aliyuncs.com/centos-vault/6.10/os/$basearch/
        http://mirrors.cloud.tencent.com/centos/$releasever/os/$basearch/
        http://mirrors.tencentyun.com/centos/$releasever/os/$basearch/
#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=os
gpgcheck=1
gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-6
 
#released updates 
[updates]
name=CentOS-$releasever - Updates - mirrors.aliyun.com
failovermethod=priority
baseurl=http://mirrors.aliyun.com/centos-vault/6.10/updates/$basearch/
        http://mirrors.aliyuncs.com/centos-vault/6.10/updates/$basearch/
        http://mirrors.cloud.tencent.com/centos/$releasever/updates/$basearch/
        http://mirrors.tencentyun.com/centos/$releasever/updates/$basearch/
#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=updates
gpgcheck=1
gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-6
 
#additional packages that may be useful
[extras]
name=CentOS-$releasever - Extras - mirrors.aliyun.com
failovermethod=priority
baseurl=http://mirrors.aliyun.com/centos-vault/6.10/extras/$basearch/
        http://mirrors.aliyuncs.com/centos-vault/6.10/extras/$basearch/
        http://mirrors.cloud.tencent.com/centos/$releasever/extras/$basearch/
        http://mirrors.tencentyun.com/centos/$releasever/extras/$basearch/
#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=extras
gpgcheck=1
gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-6
 
#additional packages that extend functionality of existing packages
[centosplus]
name=CentOS-$releasever - Plus - mirrors.aliyun.com
failovermethod=priority
baseurl=http://mirrors.aliyun.com/centos-vault/6.10/centosplus/$basearch/
        http://mirrors.aliyuncs.com/centos-vault/6.10/centosplus/$basearch/
        http://mirrors.cloud.tencent.com/centos/$releasever/centosplus/$basearch/
        http://mirrors.tencentyun.com/centos/$releasever/centosplus/$basearch/
#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=centosplus
gpgcheck=1
enabled=0
gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-6
 
#contrib - packages by Centos Users
[contrib]
name=CentOS-$releasever - Contrib - mirrors.aliyun.com
failovermethod=priority
baseurl=http://mirrors.aliyun.com/centos-vault/6.10/contrib/$basearch/
        http://mirrors.aliyuncs.com/centos-vault/6.10/contrib/$basearch/
        http://mirrors.cloud.tencent.com/centos/$releasever/contrib/$basearch/
        http://mirrors.tencentyun.com/centos/$releasever/contrib/$basearch/
#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=contrib
gpgcheck=1
enabled=0
gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-6
EOF

----

epel.repo

----
failovermethod=priority

cat <<EOF> /etc/yum.repos.d/epel.repo
[epel]
name=Extra Packages for Enterprise Linux 6 - \$basearch
baseurl=http://mirrors.aliyun.com/epel-archive/6/\$basearch
        http://mirrors.aliyuncs.com/epel-archive/6/\$basearch
        http://mirrors.cloud.tencent.com/epel/6/\$basearch
        http://mirrors.tencentyun.com/epel/6/\$basearch
#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&arch=\$basearch
failovermethod=priority
enabled=1
gpgcheck=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6
 
[epel-debuginfo]
name=Extra Packages for Enterprise Linux 6 - \$basearch - Debug
baseurl=http://mirrors.aliyun.com/epel-archive/6/\$basearch/debug
        http://mirrors.aliyuncs.com/epel-archive/6/\$basearch/debug
        http://mirrors.cloud.tencent.com/epel/6/\$basearch/debug
        http://mirrors.tencentyun.com/epel/6/\$basearch/debug
#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-6&arch=\$basearch
failovermethod=priority
enabled=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6
gpgcheck=0
 
[epel-source]
name=Extra Packages for Enterprise Linux 6 - \$basearch - Source
baseurl=http://mirrors.aliyun.com/epel-archive/6/SRPMS
        http://mirrors.aliyuncs.com/epel-archive/6/SRPMS
        http://mirrors.cloud.tencent.com/epel/6/SRPMS
        http://mirrors.tencentyun.com/epel/6/SRPMS
#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-source-6&arch=\$basearch
failovermethod=priority
enabled=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6
gpgcheck=0
EOF

----

[source, bash]
----

#生成yum缓存
yum clean all && yum makecache

#安装证书
yum install -y curl nss ca-certificates

#安装第三方仓库
yum install -y centos-release-scl

----

[source, bash]
----

cd /etc/yum.repos.d

#修改CentOS-SCLo-scl.repo文件
vi CentOS-SCLo-scl.repo

##将mirrorlist注释，baseurl取消注释，并将baseurl修改为：http://vault.centos.org/centos/6/sclo/$basearch/sclo/
[centos-sclo-sclo]
name=CentOS-6 - SCLo sclo
baseurl=http://vault.centos.org/centos/6/sclo/$basearch/sclo/
#mirrorlist=http://mirrorlist.centos.org?arch=$basearch&release=6&repo=sclo-sclo
gpgcheck=1
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo


#修改CentOS-SCLo-scl-rh.repo文件
vi CentOS-SCLo-scl-rh.repo

##将mirrorlist注释，baseurl取消注释，并将baseurl修改为：http://vault.centos.org/centos/6/sclo/$basearch/rh/
[centos-sclo-rh]
name=CentOS-6 - SCLo rh
baseurl=http://vault.centos.org/centos/6/sclo/$basearch/rh/
#mirrorlist=http://mirrorlist.centos.org?arch=$basearch&release=6&repo=sclo-rh
gpgcheck=1
enabled=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-SCLo

#生成yum缓存
yum clean all && yum makecache

----

=== 基础环境

[source, bash]
----
#安装gcc
yum install -y devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-make

#覆盖系统原有的引用
scl enable devtoolset-9 bash

#安装wget
yum install -y wget

#创建download文件夹
mkdir  ~/download

----

==== 安装OpenSSL

[source, bash]
----

cd  ~/download

wget --no-check-certificate https://www.openssl.org/source/old/1.1.1/openssl-1.1.1m.tar.gz -O openssl-1.1.1m.tar.gz

tar xf openssl-1.1.1m.tar.gz

cd openssl-1.1.1m

./config --prefix=/usr/local/openssl-1.1.1m -fPIC

make

make install

echo '/usr/local/openssl-1.1.1m/lib' >> /etc/ld.so.conf

ldconfig

ldconfig -p|grep ssl

----

TIP: 编译OpenSSL时,出现如下错误:You need Perl 5.  解决方法:yum -y install perl

==== 安装Sqlite

[source, bash]
----

cd  ~/download

wget --no-check-certificate https://www.sqlite.org/2020/sqlite-autoconf-3330000.tar.gz -O sqlite-autoconf-3330000.tar.gz

tar xf sqlite-autoconf-3330000.tar.gz

cd sqlite-autoconf-3330000

./configure --prefix=/usr/local/sqlite-3.33

make

make install

echo '/usr/local/sqlite-3.33/lib' >> /etc/ld.so.conf

ldconfig

ldconfig -p|grep libsqlite3.so

----

TIP: 无法建立 SSL 连接。 解决办法：将https改为http `wget --no-check-certificate http://www.sqlite.org/2020/sqlite-autoconf-3330000.tar.gz -O sqlite-autoconf-3330000.tar.gz` 

==== 安装Python

[source, bash]
----

cd  ~/download

#安装python
wget https://www.python.org/ftp/python/3.10.4/Python-3.10.4.tgz -O Python-3.10.4.tgz

tar xf Python-3.10.4.tgz

cd Python-3.10.4

#修改setup.py，增加SQLite路径
sqlite_inc_paths = ['/usr/include',
                    '/usr/include/sqlite',
                    '/usr/include/sqlite3',
                    '/usr/local/include',
                    '/usr/local/include/sqlite',
                    '/usr/local/include/sqlite3',
                   ]

增加 '/usr/local/sqlite-3.33/include', 到数组：

sqlite_inc_paths = ['/usr/include',
                    '/usr/include/sqlite',
                    '/usr/include/sqlite3',
                    '/usr/local/include',
                    '/usr/local/include/sqlite',
                    '/usr/local/include/sqlite3',
                    '/usr/local/sqlite-3.33/include',
                   ]

#编译           
CFLAGS='-I/usr/local/sqlite-3.33/include' \
    LDFLAGS='-L/usr/local/sqlite-3.33/lib' \
    ./configure --prefix=/usr/local/python-3.10.4 \
    --enable-optimizations \
    --with-openssl=/usr/local/openssl-1.1.1m \
    --with-ssl-default-suites=openssl \
    --with-ensurepip \
    --enable-loadable-sqlite-extensions

make

make install

##创建软链接
ln -s /usr/local/python-3.10.4 /usr/local/python3
ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3
ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3

##更换pip源
pip3 install --upgrade -i https://pypi.tuna.tsinghua.edu.cn/simple pip
pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple

----

TIP:  libffi-devel 错误："ImportError: No module named '_ctypes'" 解决方法： `yum install -y gcc make openssl-devel libffi-devel`

==== 安装java 11

[source, bash]
----

cd  ~/download

#下载源包
wget https://download.java.net/openjdk/jdk11/ri/openjdk-11+28_linux-x64_bin.tar.gz

#解压缩
tar -zxvf openjdk-11+28_linux-x64_bin.tar.gz

#移动目录
mv jdk-11 /usr/local/

#配置环境变量
vi ~/.bash_profile

#在末尾增加如下内容
export JAVA_HOME=/usr/local/jdk-11
export CLASSPATH=$JAVA_HOME/lib:$CLASSPATH
export PATH=$JAVA_HOME/bin:$PATH

#使配置文件生效
source ~/.bash_profile

----

==== 安装rust

[source, bash]
----

curl -L https://static.rust-lang.org/rustup.sh | sudo sh

source $HOME/.cargo/env

----

[NOTE]
Centos6 curl版本过低,无法使用官网带proto参数的命令

==== 安装PostgreSQL 10

[source, bash]
----

#安装PostgreSQL源
yum -y install https://download.postgresql.org/pub/repos/yum/reporpms/EL-6-x86_64/pgdg-redhat-repo-latest.noarch.rpm

#安装PostgreSQL
yum install -y postgresql10 postgresql10-devel postgresql10-server

#初始化数据库
service postgresql-10 initdb

#查看是否生成数据库配置文件
ll /var/lib/pgsql/10/data/

#修改/var/lib/pgsql/10/data/pg_hba.conf文件中的内容
host    all             all             0.0.0.0/0               password
local   all             all                                     peer

#开机自启
chkconfig postgresql-10 on

#启动
service postgresql-10 start

#查看服务状态
service postgresql-10 status

----

===== 智眼数据库

[source, bash]
----

#切换用户
su - postgres

#进入数据库
psql

#创建数据库用户
create user zhiyan with password 'aeJeifasho1aiphainga';

#创建zhiyan数据库
create database zhiyan owner zhiyan;

#选择zhiyan数据库
\c zhiyan

#创建基础用户表
CREATE TABLE public.user_info (
	id bigserial NOT NULL,
	username varchar NOT NULL,
	"password" varchar NOT NULL
);

#插入默认帐号信息
INSERT INTO public.user_info (username,"password") VALUES ('admin','zhiyan');

#创建用户模块信息表
CREATE TABLE public.user_module_stat_list (
	host varchar NOT NULL,
	module_name varchar NOT NULL,
	module_chart_type varchar NOT NULL,
	module_stat bool NOT NULL,
	module_chinese_name varchar NULL,
	module_unit varchar NULL,
	module_headers varchar NULL
);

#创建用户令牌表
CREATE TABLE public.user_token (
	id bigserial NOT NULL,
	datetime int8 NOT NULL,
	host varchar NOT NULL,
	"token" varchar NOT NULL
);

#赋权
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO zhiyan;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO zhiyan;

#退出postgresql
\q

#退出postgres用户
exit

#登陆验证
psql -h 127.0.0.1 -U zhiyan aeJeifasho1aiphainga

----

==== redis

[source, bash]
----

#安装redis
yum install -y redis

----

TIP: yum报错:没有可用软件包 redis。解决办法:下载fedora的epel仓库:yum install epel-release

[source, bash]
----

#设置reids密码
echo 'requirepass aePhohw6lae0Kihah1ph' >> /etc/redis.conf

#开机自启
chkconfig redis on

#启动
service redis start

#查看服务状态
service redis status

# 验证密码
redis-cli  -a aePhohw6lae0Kihah1ph --scan --pattern *

----

=== 智眼

==== 传输(scp)

[source, bash]
----

#安装scp
yum -y install openssh-clients

----

报错： `no matching host key type found. Their offer: ssh-rsa,ssh-dss` 解决方法: `vi ~/.ssh/config` 

加入以下内容

----

Host *
     ServerAliveInterval 10
      HostKeyAlgorithms +ssh-rsa
      PubkeyAcceptedKeyTypes +ssh-rsa

----

==== 创建文件夹

[source, bash]
----
#创建项目文件夹
mkdir -p /data/zhiyan/zhiyan-web-server/ /data/zhiyan/zhiyan-server /data/zhiyan/zhiyan-web /data/zhiyan/module/bin /data/zhiyan/module/conf

#创建项目日志文件夹
mkdir -p /var/log/zhiyan/module /var/log/zhiyan/zhiyan-server /var/log/zhiyan/zhiyan-web-server /var/log/zhiyan/zhiyan-agent

#创建用户
useradd --comment ZhiYan --home-dir /var/lib/zhiyan --shell /sbin/nologin zhiyan

#赋权
chown -R zhiyan:zhiyan /var/lib/zhiyan /var/log/zhiyan

----

==== web-server

本地：

[source, bash]
----

#将zhiyan-web-server生成jar包
mvn package

----

将 `jar包`、`application.properties.sample.sample`、`logback.xml.sample` 三个文件压缩打包,然后上传到服务器 `/data/zhiyan/zhiyan-web-server` 目录下 

服务器：
[source, bash]
----

#创建软链接
ln -s /data/zhiyan/zhiyan-web-server/zhiyan-web-server-1.0.0.jar /data/zhiyan/zhiyan-web-server/lastest.jar

#创建服务文件
cat << EOF > /etc/rc.d/init.d/zhiyan-web-server
#/bin/bash
#chkconfig: 2345 90 01
#description:zhiyan-web-server

CONFIG_FILE=/data/zhiyan/zhiyan-web-server/application.properties
JAR_FILE=/data/zhiyan/zhiyan-web-server/lastest.jar
PID=\$(ps -ef | grep "zhiyan-web-server" | grep 'jdk-11' | grep -v grep | awk '{print \$2}')
ProcNumber=\$(ps -ef |grep -w zhiyan-web-server|grep 'jdk-11'|grep -v grep|wc -l)

start() {
    echo "Starting ZhiYan-Web-Server... "
    nohup /usr/local/jdk-11/bin/java -Dspring.config.location=\$CONFIG_FILE -jar \$JAR_FILE >> /var/log/zhiyan/zhiyan-web-server/nohup.log 2>&1 &
    echo \$PID >/var/run/zhiyan-web-server.pid
}

stop() {
    echo "Shutting down ZhiYan-Web-Server... "
    kill -9 \$PID 
    rm -rf /var/run/zhiyan-web-server.pid
    }

status() {
        if [ \$ProcNumber == 0 ];
        then
           echo "ZhiYan-Web-Server is Faild"
        else
           echo "ZhiYan-Web-Server (pid  \$PID) is running..."
        fi 
}

case "\$1" in
start)
    start
    ;;
stop)
    stop
    ;;
status)
    status
    ;;
restart)
    echo "Restarting ZhiYan-Web-Server "
    stop
    start
    ;;
*)
    echo "Usage:service ZhiYan-Web-Server{start|stop|restart|status}"
    exit 2
    ;;
esac
EOF

#修改权限
chmod 755 /etc/rc.d/init.d/zhiyan-web-server

chkconfig --add zhiyan-web-server

chkconfig zhiyan-web-server on

service zhiyan-web-server start

service zhiyan-web-server status

----

TIP:  报错: `ERROR in ch.qos.logback.core.rolling.RollingFileAppender[MAIN] - openFile(error.log,true) call failed. java.io.FileNotFoundExceptio` 解决办法: 修改logback.xml中第五行<file>字段，修改为可写入的地址

配置文件(src/main/resources/application.properties.sample):

----
#web-server端口
server.port=8080

spring.jpa.hibernate.ddl-auto=none

#PostgreSQL地址
spring.datasource.url=jdbc:postgresql://localhost:5432/zhiyan

#PostgreSQL用户名
spring.datasource.username=zhiyan

#PostgreSQL密码
spring.datasource.password=zhiyan

#SQL驱动
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#Redis地址
spring.redis.host=localhost

#Redis端口
spring.redis.port=6379

#Redis密码
spring.redis.password=zhiyan

#Redis数据表
spring.redis.database=0

#Redis最大空闲连接数
spring.redis.jedis.pool.max-active=32

# 最小空闲连接数
spring.redis.jedis.pool.max-idle=6

# 最大活跃连接数，负数为不限制
spring.redis.jedis.pool.min-idle=4

#Redis等待可用连接的最大时间，负数为不限制
spring.redis.jedis.pool.max-wait=100

#数据库连接超时时间
spring.redis.timeout=1000

#log配置文件
logging.config=/data/zhiyan/zhiyan-web-server/logback.xml

----

==== web


修改 `zhiyan-web` 中 `src/config.json` 中的 `host` 地址,修改为 `服务器web-server` 的地址和端口

----

{
    "zhiyan" : {
      "host": "127.0.0.0:1111"
    }
  }

----

本机：
[source, bash]
----

#生成静态网页
npm run build

#在文件夹中会生成'build'文件夹

#将build文件夹压缩打包
tar zcvf web.tar.gz build/

#将生成的build文件夹压缩打包传输至服务器/data/zhiyan/zhiyan-web目录下

----

服务器：

[source, bash]
----

#关闭selinux

##（永久关闭）
sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config

##重启
reboot

##（临时关闭）
setenforce 0

----

[source, bash]
----

#安装nginx
yum install -y nginx

chkconfig nginx on

service nginx start

service nginx status

----

----

#修改nginx配置文件,在http{}内增加如下内容
vi /etc/nginx/nginx.conf

server {
  listen 3222;
  # server_name your.domain.com;
  root /data/zhiyan/zhiyan-web;
  index index.html index.htm;
  location / {
    try_files $uri $uri/ /index.html;
  }
  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }
  error_page 500 502 503 504 /500.html;
  client_max_body_size 20M;
  keepalive_timeout 10;
}

----

==== server

本地：

[source, bash]
----

#将zhiyan-server生成jar包
mvn package

----

将 `jar包`、`application.properties.sample`、`logback.xml.sample` 三个文件压缩打包,然后上传到服务器 `/data/zhiyan/zhiyan-web-server` 目录下 

服务器：
[source, bash]
----

#创建软链接
ln -s /data/zhiyan/zhiyan-server/zhiyan-server-1.0.0.jar /data/zhiyan/zhiyan-server/lastest.jar

#创建.service文件
cat << EOF > /etc/rc.d/init.d/zhiyan-server
#/bin/bash
#chkconfig: 2345 90 01
#description:zhiyan-server

CONFIG_FILE=/data/zhiyan/zhiyan-server/application.properties
JAR_FILE=/data/zhiyan/zhiyan-server/lastest.jar
PID=\$(ps -ef | grep "zhiyan-server" | grep 'jdk-11' | grep -v grep | awk '{print \$2}')
ProcNumber=\$(ps -ef |grep -w zhiyan-server|grep 'jdk-11'|grep -v grep|wc -l)

start() {
    echo "Starting ZhiYan-Server... "
    nohup /usr/local/jdk-11/bin/java -Dspring.config.location=\$CONFIG_FILE -jar \$JAR_FILE >> /var/log/zhiyan/zhiyan-server/nohup.log 2>&1 &
    echo \$PID >/var/run/zhiyan-server.pid
}

stop() {
    echo "Shutting down ZhiYan-Server... "
    kill -9 \$PID 
    rm -rf /var/run/zhiyan-server.pid
    }

status() {
        if [ \$ProcNumber == 0 ];
        then
           echo "ZhiYan-Server is Faild"
        else
           echo "ZhiYan-Server (pid  \$PID) is running..."
        fi 
}

case "\$1" in
start)
    start
    ;;
stop)
    stop
    ;;
status)
    status
    ;;
restart)
    echo "Restarting ZhiYan-Server "
    stop
    start
    ;;
*)
    echo "Usage:service ZhiYan-Server{start|stop|restart|status}"
    exit 2
    ;;
esac
EOF

#修改权限
chmod 755 /etc/rc.d/init.d/zhiyan-server

chkconfig --add zhiyan-server

chkconfig zhiyan-server on

service zhiyan-server  start

service zhiyan-server  status

----

TIP:  报错: `ERROR in ch.qos.logback.core.rolling.RollingFileAppender[MAIN] - openFile(error.log,true) call failed. java.io.FileNotFoundExceptio` 解决办法: 修改logback.xml中第五行<file>字段，修改为可写入的地址

配置文件(src/main/resources/application.properties.sample):

----
#grpc地址
grpc.server.address=127.0.0.1

#grpc端口
grpc.server.port=9876

#PostgreSQL地址
db.url=jdbc:postgresql://localhost:5432/zhiyan

#PostgreSQL用户名
db.username=zhiyan

#PostgreSQL密码
db.password=zhiyan

#PostgreSQL驱动
db.driver=org.postgresql.Driver

#log配置文件
logging.config=/data/zhiyan/zhiyan-server/logback.xml
----

==== agent
[NOTE]
Rust项目编译生成的二进制文件放在不同环境下运行会出现libc版本不同的错误,所以Rust项目在服务器上编译

[source, bash]
----

#创建rust项目编译文件夹
mkdir ~/download/ZhiYan ~/download/ZhiYanModule

#将libzygrpc、libzymod-rust、zhiyan-agent项目传输至服务器~/download/ZhiYan目录下

#创建Cargo.toml
cat << EOF > ~/download/ZhiYan/Cargo.toml
[workspace]

members = [
    "zhiyan-agent",
    "libzymod-rust"
]
exclude = [
    "libzygrpc"
]

[patch.crates-io]
libzygrpc={path = "/root/download/ZhiYan/libzygrpc/rust"}
EOF 

#编译
cargo build --release

#将编译好的可执行文件放入bin目录
cp -r target/release/zhiyan-agent /data/zhiyan/module/bin/

#复制agent配置文件与日志配置文件
cp zhiyan-agent/conf/agent.conf.sample /data/zhiyan/module/conf/agent.conf

cp zhiyan-agent/conf/agent_log.yaml.sample /data/zhiyan/module/conf/log.yaml

#创建服务文件
cat << EOF > /etc/rc.d/init.d/zhiyan-agent
#!/bin/bash
#chkconfig: 2345 90 01
#description:zhiyan-agent

PID=\$(ps -ef | grep "zhiyan-agent" | grep "module/bin" | grep -v grep | awk '{print \$2}')
ProcNumber=\$(ps -ef | grep -w zhiyan-agent |grep "module/bin" | grep -v grep| wc -l)

start() {
    echo "Starting ZhiYan-Agent..."
    nohup /data/zhiyan/module/bin/zhiyan-agent -c /data/zhiyan/module/conf/agent.conf -l /data/zhiyan/module/conf/log.yaml >> /var/log/zhiyan/zhiyan-agent/nohup.log 2>&1 &
    echo \$PID >/var/run/zhiyan-agent.pid
}

stop() {
    echo "Shutting down ZhiYan-Agent..."
    kill -9 \$PID
    rm -rf /var/run/zhiyan-agent.pid
}

status() {
        if [ \$ProcNumber == 0 ];
        then
           echo "ZhiYan-Agent is Faild"
        else
           echo "ZhiYan-Agent (pid  \$PID) is running..."
        fi 
}

case "\$1" in
start)
    start
    ;;
stop)
    stop
    ;;
status)
    status
    ;;
restart)
    echo "Restarting ZhiYan-Agent "
    stop
    start
    ;;
*)
    echo "Usage:service ZhiYan-Agent{start|stop|restart|status}"
    exit 2
    ;;
esac
EOF

#修改权限
chmod 755 /etc/rc.d/init.d/zhiyan-agent

chkconfig --add zhiyan-agent

chkconfig zhiyan-agent on

service zhiyan-agent start

service zhiyan-agent status

----

TIP: error: linker `cc` not found  解决办法：yum install gcc

配置文件(conf/agent.conf.sample):

----

[zyagent]
active=true

#智眼server GRPC地址
server_host=localhost

#智眼server GRPC端口
server_port=9876

#网页生成的host和对应的令牌(token)
host=localhost
token=

----

==== modules

[source, bash]
----

#在本地将Module打包
tar zcvf ZhiYanModule.tar.gz zhiyan-mod-*

#将ZhiYanModule.tar.gz通过scp传输至~/download/ZhiYanModule
scp ZhiYanModule.tar.gz root@127.0.0.1:~/download/ZhiYanModule

#创建config复制器
cat << EOF > ~/download/ZhiYanModule/config_cp.sh

cd zhiyan-mod-\$1

if test -f "conf/\$1_log.yaml.sample"; then
    # Rust
    cp conf/\$1.conf.sample /data/zhiyan/module/conf/\$1.conf && cp conf/\$1_log.yaml.sample /data/zhiyan/module/conf/\$1.log.yaml
else
    # Python
    cp conf/\$1.conf.sample /data/zhiyan/module/conf/\$1.conf
fi

cd ..
EOF

sh config_cp.sh bandwidth
sh config_cp.sh cpu
sh config_cp.sh dns
sh config_cp.sh filesystem
sh config_cp.sh hostname
sh config_cp.sh io
sh config_cp.sh load
sh config_cp.sh memory
sh config_cp.sh network
sh config_cp.sh network-address
sh config_cp.sh network-route
sh config_cp.sh processes
sh config_cp.sh swap
sh config_cp.sh tasks
sh config_cp.sh uptime

cd /data/zhiyan/module/conf/

sed -i 's/token=/token={your token}/g' *.conf

sed -i 's/localhost/{your host}/g' *.conf

----

===== Rust项目

[NOTE]
Rust项目编译生成的二进制文件放在不同环境下运行会出现libc版本不同的错误,所以Rust项目在服务器上编译

[source, bash]
----
#创建Cargo.toml
cat << EOF > ~/download/ZhiYanModule/Cargo.toml
[workspace]

members = [
    "zhiyan-mod-cpu",
    "zhiyan-mod-swap",
    "zhiyan-mod-hostname",
    "zhiyan-mod-tasks",
    "zhiyan-mod-bandwidth",
    "zhiyan-mod-dns",
    "zhiyan-mod-uptime",
    "zhiyan-mod-io",
    "zhiyan-mod-load",
    "zhiyan-mod-memory",
    "zhiyan-mod-network-route",
    "zhiyan-mod-network"
]

[patch.crates-io]
libzymod-rust = { path = "/root/download/ZhiYan/libzymod-rust" }
libzygrpc = { path = "/root/download/ZhiYan/libzygrpc/rust"}
EOF

#编译
cargo build --release

#将编译好的可执行文件放入bin目录
cp -r ~/download/ZhiYanModule/target/release/zhiyan-mod-* /data/zhiyan/module/bin/

rm -rf /data/zhiyan/module/bin/*.d

----

配置文件(conf/memory.conf.sample)

以memory模块举例

----

[zymod]
#module名称
mod_name=memory

active=true

#网页生成的host和对应的令牌(token)
host=localhost
token=

#zhiyan-agent地址
agent_host=localhost

#zhiyan-agent端口
agent_port=9090

#日志等级 (0：严重错误，1：错误，2：警告，3：信息，4：调试，5：跟踪调试)
debug=3

#试运行
dry_run=false

#间隔时间
interval=3000

#单位
unit=G

#module中文命名
chinese_name=内存

#图表类型(chart：绘图，list：列表，chartlist：绘图列表，tag：状态栏，detailedtag：详细状态栏)
chart_type=chart

#字段映射 例:{"eng":"中文"}；tag字段表示生成图表同时也会生成小标签，name表示小标签命名，keyword表示小标签数据采用的字段名
headers={"buff_cache":"内核缓冲/缓存","free":"未分配","used":"已分配","total":"内存总量","avail":"可直接使用","tag": [{"name": "内存已分配","keyword": "used"},{"name": "内存未分配","keyword": "free"}]}

----

===== Python项目

====== libzygrpc(python)

[source, bash]
----

cd ~/download/ZhiYan/libzygrpc/python

#安装依赖
pip3 install -U grpcio protobuf grpcio-tools

#在libzygrpc目录下运行
python3 -m grpc_tools.protoc -I . --python_out=python/ --grpc_python_out=python/ proto/zhiyan_rpc.proto
#gRPC工具会生成两个Python文件：proto/zhiyan_rpc_pb2.py,proto/zhiyan_rpc_pb2_grpc.py

#安装
sh ~/download/ZhiYan/libzygrpc/python/build.sh 

----

====== libzymod-python

[source, bash]
----
cd ~/download/ZhiYan/libzymod-python

#安装
sh ~/download/ZhiYan/libzymod-python/build.sh

----

====== module(python)

[source, bash]
----

#python安装脚本
cat << EOF > ~/download/ZhiYanModule/py_install.sh
cd zhiyan-mod-\$1 && sh build.sh && cd ..
EOF

sh py_install.sh filesystem

sh py_install.sh processes

sh py_install.sh network-address

cp /usr/local/python3/bin/zymod* /data/zhiyan/module/bin/
----

===== Module管理

[source, bash]
----
#创建Module启动器
cat << EOF > /data/zhiyan/module/bin/starter.sh
if test -f "/data/zhiyan/module/conf/\$1.log.yaml"; then
    # Rust
    /data/zhiyan/module/bin/zhiyan-mod-\$1 -c /data/zhiyan/module/conf/\$1.conf  -l /data/zhiyan/module/conf/\$1.log.yaml
else
    # Python
    /data/zhiyan/module/bin/zhiyan-mod-\$1 -c /data/zhiyan/module/conf/\$1.conf
fi
EOF

#创建服务文件
cat << EOF > /etc/rc.d/init.d/zhiyan-mod
#!/bin/bash
#chkconfig: 2345 90 01
#description:zhiyan-mod

PID=\$(ps -ef | grep zhiyan-mod-\$1 | grep "module/bin" | grep -v grep | awk '{print \$2}')
ProcNumber=\$(ps -ef | grep -w zhiyan-mod-\$1 | grep "module/bin" | grep -v grep | wc -l)

case "\$2" in
start)
    echo "Starting zhiyan-mod-\$1..."
    nohup /bin/sh /data/zhiyan/module/bin/starter.sh \$1 >>/var/log/zhiyan/module/\$1_nohup.log 2>&1 &
    echo \$PID >/var/run/zhiyan-mod-\$1.pid
    ;;
stop)
    echo "Shutting down zhiyan-mod-\$1..."
    kill -9 \$PID
    rm -rf /var/run/zhiyan-mod-\$1.pid
    ;;
status)
    if [ \$ProcNumber == 0 ]; then
        echo "zhiyan-mod-\$1 is Faild"
    else
        echo "zhiyan-mod-\$1 (pid  \$PID) is running..."
    fi
    ;;
restart)
    echo "Restarting zhiyan-mod-\$1 "
    kill -9 \$PID
    rm -rf /var/run/zhiyan-mod-\$1.pid
    nohup /bin/sh /data/zhiyan/module/bin/starter.sh \$1 >>/var/log/zhiyan/module/\$1_nohup.log 2>&1 &
    echo \$PID >/var/run/zhiyan-mod-\$1.pid
    ;;
*)
    echo "Usage:service zhiyan-mod-\$1{start|stop|restart|status}"
    exit 2
    ;;
esac
EOF

#修改权限
chmod 755 /etc/rc.d/init.d/zhiyan-mod

service zhiyan-mod bandwidth start

service zhiyan-mod cpu start

service zhiyan-mod dns start

service zhiyan-mod hostname start

service zhiyan-mod io start

service zhiyan-mod memory start

service zhiyan-mod processes start

service zhiyan-mod swap start

service zhiyan-mod tasks start

service zhiyan-mod uptime start

service zhiyan-mod network-route start

service zhiyan-mod filesystem start

service zhiyan-mod network-address start

service zhiyan-mod load start

service zhiyan-mod network start

----